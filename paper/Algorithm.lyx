#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Caption

\begin_layout Plain Layout
Reinforcement Routing Algorithm for NoC with Per-core DVFS
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Variables and functions:
\end_layout

\begin_layout Standard
\begin_inset Formula $Q_{x}(d,y)$
\end_inset

 - estimated delivery time from node 
\begin_inset Formula $x$
\end_inset

 to node 
\begin_inset Formula $d$
\end_inset

 via node 
\begin_inset Formula $y$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $q_{x}(dirIn)$
\end_inset

 - the queue time of the most recent packet received from port 
\begin_inset Formula $dirIn$
\end_inset

 then sent from node 
\begin_inset Formula $x$
\end_inset


\end_layout

\begin_layout Standard
determinstic 
\begin_inset Formula $minQ_{x}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula $dir\; minQ_{x}(d,\{directions\})$
\end_inset

 - a function to select the routing direction 
\begin_inset Formula $dir$
\end_inset

 with minimum Q-value from 
\begin_inset Formula $\{directions\}$
\end_inset


\end_layout

\begin_layout Standard
non-determinstic 
\begin_inset Formula $minQ_{x}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula $\{dirs\}\; minQ_{x}(d,\{directions\})$
\end_inset

 - a function to select the routing directions 
\begin_inset Formula $\{dirs\}$
\end_inset

 with minimum Q-value from 
\begin_inset Formula $\{directions\}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $t_{y}=(d==y)?q_{y}:Q_{y}(d,$
\end_inset

 deterministic 
\begin_inset Formula $minQ_{y}(d,\{all\; directions\})$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\end_layout

\begin_layout Standard
Update the Q-table for power gating and DVFS:
\end_layout

\begin_layout Standard
\begin_inset Formula $if$
\end_inset

 (node 
\begin_inset Formula $y$
\end_inset

 is power gated) 
\begin_inset Formula $then$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset

node 
\begin_inset Formula $y$
\end_inset

 sends signal to all neighboring nodes
\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\forall x\in\{neighbors\; of\; y\},\;\forall d\in NoC\wedge d\neq x,\; Q_{x}(d,y)=\infty$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $else\; if$
\end_inset

 (node 
\begin_inset Formula $y$
\end_inset

 is power resumed) 
\begin_inset Formula $then$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset

node 
\begin_inset Formula $y$
\end_inset

 sends signal to all neighboring nodes
\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\forall x\in\{neighbors\; of\; y\},\;\forall d\in NoC\wedge d\neq x,\; Q_{x}(d,y)=initial\; value$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $else\; if$
\end_inset

 (frequency of node 
\begin_inset Formula $y$
\end_inset

 is scaled from 
\begin_inset Formula $f$
\end_inset

 to 
\begin_inset Formula $f'$
\end_inset

) 
\begin_inset Formula $then$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset

node 
\begin_inset Formula $y$
\end_inset

 sends signal to all neighboring nodes
\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $\forall x\in\{neighbors\; of\; y\},\;\forall d\in NoC\wedge d\neq x,\; Q_{x}(d,y)=Q_{x}(d,y)+q_{y}(f'^{-1}-f^{-1})$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $end\; if$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\end_layout

\begin_layout Standard
Update the Q-table for regular packet delivery (optional):
\end_layout

\begin_layout Standard
\begin_inset Formula $when$
\end_inset

 node 
\begin_inset Formula $x$
\end_inset

 sends a packet 
\begin_inset Formula $p$
\end_inset

 to its neighbor 
\begin_inset Formula $y$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad if$
\end_inset

 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
p
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 was routed to the 
\begin_inset Formula $port$
\end_inset


\begin_inset Formula $\neq local\neq neighbor\neq dirIn$
\end_inset

 (meaning routing was 
\begin_inset Quotes eld
\end_inset

normal
\begin_inset Quotes erd
\end_inset

) 
\begin_inset Formula $then$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad\quad$
\end_inset

 save the queue time of 
\begin_inset Formula $p$
\end_inset

 to 
\begin_inset Formula $q_{x}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset

 send q-table value query request to all neighbor nodes 
\begin_inset Formula $\forall y\in\{neighbors\; of\; x\}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Formula $\quad\quad$
\end_inset

 wait for q-table value feedback signal from all neighbor nodes 
\begin_inset Formula $\forall y\in\{neighbors\; of\; x\}$
\end_inset


\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $\quad\quad\forall y\in\{neighbors\; of\; x\}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $(\forall d\in NoC)\;\wedge\;(d\neq x)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset

 
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset

update Q-table with 
\begin_inset Formula $Q'_{x}(d,y)=Q_{x}(d,y)+\Delta Q_{x}(d,y)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad$
\end_inset

 
\begin_inset Formula $\quad\quad$
\end_inset

 where 
\begin_inset Formula $\Delta Q_{x}(d,y)=\eta(q_{x}+1+t_{y}-Q_{x}(d,y))$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad end\; if$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $when$
\end_inset

 node 
\begin_inset Formula $y$
\end_inset

 receives q-table value query request from its neighbor 
\begin_inset Formula $x$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset

send feedback signal with entire q-table to node 
\begin_inset Formula $x$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\end_layout

\begin_layout Standard
Routing polocy:
\end_layout

\begin_layout Standard
\begin_inset Formula $for$
\end_inset

 each node 
\begin_inset Formula $x$
\end_inset

 to route a packet 
\begin_inset Formula $p$
\end_inset

 with destination node 
\begin_inset Formula $d$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $if$
\end_inset

 (
\begin_inset Formula $x==d$
\end_inset

) 
\begin_inset Formula $then$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\qquad$
\end_inset

route 
\begin_inset Formula $p$
\end_inset

 to local PE
\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $if$
\end_inset

 (
\begin_inset Formula $x$
\end_inset

's neighbor 
\begin_inset Formula $y$
\end_inset

 
\begin_inset Formula $==d$
\end_inset

) 
\begin_inset Formula $then$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\qquad$
\end_inset

route 
\begin_inset Formula $p$
\end_inset

 to 
\begin_inset Formula $y$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $else$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\qquad$
\end_inset

route 
\begin_inset Formula $p$
\end_inset

 to (either determinstic or non-determinstic)
\begin_inset Formula $minQ_{x}(d,\{\forall dir\in directions\wedge dir\neq input\})$
\end_inset

 
\end_layout

\end_body
\end_document
